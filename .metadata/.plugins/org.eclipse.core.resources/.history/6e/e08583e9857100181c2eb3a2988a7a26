/**
* @file		Ethernet.h
* @brief	Contains the Ethernet API.
*     		It is intended to be used in ISO C conforming development
*     		environments and checks for this insofar as it is possible
*     		to do so.
* @author	Tiago Lopes
*
* Copyright(C) 2015, Tiago Lopes
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/

/** @defgroup ETHERNET ETHERNET
 * @ingroup ETHERNET
 * This package provides the capability to use the Ethernet peripheral on LPC1769 microcontroller and also Physical device LAN8720.
 * @{
 */

#define ETHERNET_ENABLE_POWER_CLOCK 1<<30 /* PCONP bit to enable ETHERNET peripheral power */

#define MAXIMUM_FRAME_LENGTH 0x600 /* Maximum length for a Ethernet Frame */

#define RETRANSMISSION_MAXIMUM 0xF /* Maximum Retransmission attempts stipulated by the standard */
#define COLLISION_WINDOW 0x37 /* Default Collision Window value */

/* Non Back-to-Back Inter-Packet-Gap Register */
#define NON_BACK_TO_BACK_INTER_PACKET_GAP_PART1 0xC
#define NON_BACK_TO_BACK_INTER_PACKET_GAP_PART2 0x12

/* Back-to-Back Inter-Packet-Gap Register */
#define IPGT_FULL_DUP       0x00000015  /* Recommended value for Full Duplex */
#define IPGT_HALF_DUP       0x00000012  /* Recommended value for Half Duplex */


#define PHY_DEF_ADR 1<<8 /* Address of the Physical device */

/** @addtogroup PHY_Basic_Control_Register ETHERNET Physical device Basic Control Register
 *
 * @{
 */
#define BASIC_CONTROL_REGISTER 0 /* Basic Control Register address */
#define PHY_RESET 1<<15 /* Software reset. Bit is self-clearing */
#define PHY_AUTO_NEGOTIATION_ENABLE 1<<12 /* Enable auto-negotiate process */
#define PHY_AUTO_NEGOTIATION_COMPLETE 1<<5 /* Software reset. Bit is self-clearing */
#define PHY_LINK_STATUS 1<<2 /* Software reset. Bit is self-clearing */
/**
* @}
*/

#define MCMD_READ 1 /* This bit causes the MII Management hardware to perform a single Read cycle */
#define MIND_BUSY 1 /* Bit to check in MII Mgmt Indicators Register if MII is busy */

#define MII_RD_TOUT 100000 /* Timeout for read operation */
#define MII_WR_TOUT 100000 /* Timeout for write operation */

#define A_100BASE 1<<8 /* This bit configures the Reduced MII logic for the current operating speed */

/** @addtogroup MAC_Address ETHERNET Mac address to be used by Ethernet and also uip
 *
 * @{
 */
#define UIP_ETHADDR0 0x0
#define	UIP_ETHADDR1 0x0
#define	UIP_ETHADDR2 0x0
#define	UIP_ETHADDR3 0x0
#define	UIP_ETHADDR4 0x0
#define	UIP_ETHADDR5 0x0
/**
* @}
*/

#define BASIC_STATUS_REGISTER 1
#define AUTO_NEGOTIATION_ADVERTISEMENT_REGISTER 4


#define RFC_BROADCAST_EN 1<<1 /* All broadcast frames are accepted */
#define RFC_PERFECT_EN 1<<5

#define INT_RX_DONE 1<<3 /* Enable for interrupt triggered when a receive descriptor has been processed */
#define INT_TX_DONE 1<<7 /* Enable for interrupt triggered when a descriptor has been transmitted */

/** @addtogroup Command_Register ETHERNET Command Register
 *
 * @{
 */
#define TX_ENABLE 1<<1 				/* Enable transmit */
#define RX_ENABLE 1 				/* Enable receive */
#define ENABLE_RMI 1<<9 			/* Enable RMII mode */
#define DISABLE_PASS_RUN_FRAME 1<<6 /* When set to ’1’, passes runt frames smaller than 64 bytes to 0 memory unless they have a CRC error */
/**
* @}
*/

/** @addtogroup EMAC_Memory_Buffer ETHERNET EMAC Memory Buffer configuration for 16K Ethernet RAM
 *
 * @{
 */
#define NUM_RX_FRAG 4 		/* Num.of RX Fragments 4*1536= 6.0kB */
#define NUM_TX_FRAG 2 		/* Num.of TX Fragments 3*1536= 4.6kB */
#define ETH_FRAG_SIZE 1536 	/* Packet Fragment size 1536 Bytes */
#define ETH_MAX_FLEN 1536 	/* Max. Ethernet Frame Size */
/**
* @}
*/

/** @addtogroup EMAC_Variables ETHERNET EMAC variables located in AHB SRAM bank 1
 *
 * @{
 */
#define RX_DESC_BASE 0x2007c000
#define RX_STAT_BASE (RX_DESC_BASE + NUM_RX_FRAG*8)
#define TX_DESC_BASE (RX_STAT_BASE + NUM_RX_FRAG*8)
#define TX_STAT_BASE (TX_DESC_BASE + NUM_TX_FRAG*8)
#define RX_BUF_BASE (TX_STAT_BASE + NUM_TX_FRAG*4)
#define TX_BUF_BASE (RX_BUF_BASE + NUM_RX_FRAG*ETH_FRAG_SIZE)
/**
* @}
*/

/** @addtogroup MAC_Configuration_Register ETHERNET MAC Configuration Register 1
 *
 * @{
 */
#define MAC1_RESET_TX         		 0x00000100  /* Reset TX Logic                    */
#define MAC1_RESET_MCS_TX     		 0x00000200  /* Reset MAC TX Control Sublayer     */
#define MAC1_RESET_RX         		 0x00000400  /* Reset RX Logic                    */
#define MAC1_RESET_MCS_RX     		 0x00000800  /* Reset MAC RX Control Sublayer     */
#define MAC1_SIMULATION_RESET        0x00004000  /* Simulation Reset                  */
#define MAC1_SOFT_RESET       		 0x00008000  /* Soft Reset MAC                    */
#define MAC1_PASS_ALL_RECEIVE_FRAMES 1<<1 		 /* Pass all frames regardless of type (normal vs Control) */
#define MAC1_RECEIVE_ENABLE 1 					 /* Allow receive frames to be received. */
/**
* @}
*/

/** @addtogroup MAC_Configuration_Register ETHERNET MAC Configuration Register 2
 *
 * @{
 */
#define FULL_DUPLEX 1 /* When enabled (set to ’1’), the MAC operates in Full-Duplex mode */
#define CRC_ENABLE 1<<4 /* Set this bit to append a CRC to every frame whether padding was required or not */
#define PAD_CRC_ENABLE 1<<5 /* Set this bit to have the MAC pad all short frames */
#define VLAN_PAD_ENABLE 1<<6 /* Set this bit to cause the MAC to pad all short frames to 64 bytes and append a valid CRC */
#define AUTO_DETECT_PAD_ENABLE 1<<7 /* Set this bit to cause the MAC to automatically detect the type of frame, either tagged or un-tagged */
/**
* @}
*/

#define COMMAND_REGISTER_RESET       0x00000008  /* Reset Host Registers              */
#define COMMAND_TX_RESET           	 0x00000010  /* Reset Transmit Datapath           */
#define COMMAND_RX_RESET           	 0x00000020  /* Reset Receive Datapath            */
#define CR_FULL_DUP         		 0x00000400  /* Full Duplex                       */

/* RX Descriptor Control Word */
#define RCTRL_INT           0x80000000  /* Generate RxDone Interrupt         */

#define RX_CONTROL_SIZE_MASK 0x7FF


/** @defgroup ETHERNET_Public_Functions ETHERNET Public Functions
 * @{
 */

 /**
 * @brief	Initiate/configure the Ethernet peripheral and Physical device LAN8720
 * @return  Nothing
 * @note	MUST be called before any other Ethernet function
 */
void Ethernet_Init();

/**
* @brief	Receives a frame from the Ethernet
* @param    buffer: buffer to store received frame
* @return   the length of the read frame
*/
int Ethernet_ReceiveFrame(char * buffer);

/**
* @brief	Initiate/configure the Ethernet peripheral and Physical device LAN8720
* @param    buffer: the buffer with the data to write to the frame
* @param    length: the length of the buffer
* @return   Nothing
*/
void Ethernet_WriteFrame(char * buffer, int length);


/**
 * @}
 */

/**
 * @}
 */
